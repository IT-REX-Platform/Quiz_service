type Mutation {
    """
    Create a quiz.
    """
    createQuiz(assessmentId: UUID!, input: CreateQuizInput!): Quiz!

    """
    Modify a quiz.
    """
    mutateQuiz(assessmentId: UUID!): QuizMutation!

    """
    Delete a quiz.
    """
    deleteQuiz(assessmentId: UUID!): UUID!
        @deprecated(reason: "Only for development, will be removed in production. Use deleteAssessment in contents service instead.")
}

type QuizMutation {
    """
    Id of the quiz to modify.
    """
    assessmentId: UUID!
    """
    Add a multiple choice question to the quiz questions, at the end of the list.
    """
    addMultipleChoiceQuestion(input: CreateMultipleChoiceQuestionInput!): Quiz!
    """
    Update a multiple choice question in the quiz questions.
    """
    updateMultipleChoiceQuestion(input: UpdateMultipleChoiceQuestionInput!): Quiz!

    # add other types of questions here

    """
    Removes the question with the given number from the quiz.
    This will also update the numbers of the following questions.
    """
    removeQuestion(number: Int! @Positive): Quiz!
    """
    Switch the position of two questions with the given numbers.
    """
    switchQuestions(firstNumber: Int! @Positive, secondNumber: Int! @Positive): Quiz!


    """
    Set the threshold of the quiz, i.e., how many questions the user has to answer correctly to pass the quiz.
    """
    setRequiredCorrectAnswers(requiredCorrectAnswers: Int! @PositiveOrZero): Quiz!
    """
    Set the question pooling mode of the quiz.
    """
    setQuestionPoolingMode(questionPoolingMode: QuestionPoolingMode!): Quiz!
    """
    Set the number of questions that are randomly selected from the list of questions.
    Will only be considered if questionPoolingMode is RANDOM.
    """
    setNumberOfRandomlySelectedQuestions(numberOfRandomlySelectedQuestions: Int! @Positive): Quiz!
}


input CreateQuizInput {

    """
    Threshold of the quiz, i.e., how many questions the user has to answer correctly to pass the quiz.

    If this is greater than the number of questions, the behavior is the same
    as if it was equal to the number of questions.
    """
    requiredCorrectAnswers: Int! @PositiveOrZero

    """
    Question pooling mode of the quiz.
    """
    questionPoolingMode: QuestionPoolingMode!

    """
    Number of questions that are randomly selected from the list of questions.
    Should only be set if questionPoolingMode is RANDOM.

    If this is greater than the number of questions, the behavior is the same
    as if it was equal to the number of questions.

    If this is null or not set, the behavior is the same as if it was equal to the number of questions.
    """
    numberOfRandomlySelectedQuestions: Int @Positive

    """
    List of multiple choice questions.
    """
    multipleChoiceQuestions: [CreateMultipleChoiceQuestionInput!]! = []

    # other types of questions
}

input CreateMultipleChoiceQuestionInput {
    """
    Number of the question, used for ordering.
    This can be omitted, in which case a number, one higher than the highest number of the existing questions, will be used.
    """
    number: Int @Positive
    """
    Text of the question, can be markdown.
    """
    text: String! @Size(max: 1000)
    """
    List of answers.
    """
    answers: [MultipleChoiceAnswerInput!]! @ContainerSize(min: 2)
    """
    Optional hint for the question, can be markdown.
    """
    hint: String @Size(max: 1000)
}

input UpdateMultipleChoiceQuestionInput {
    """
    UUID of the question to update.
    """
    id: UUID!
    """
    Text of the question, can be markdown.
    """
    text: String! @Size(max: 1000)
    """
    List of answers.
    """
    answers: [MultipleChoiceAnswerInput!]!
    """
    Optional hint for the question, can be markdown.
    """
    hint: String @Size(max: 1000)

}

input MultipleChoiceAnswerInput {
    """
    Text of the answer, can be markdown.
    """
    text: String! @Size(max: 1000)
    """
    Whether the answer is correct or not.
    """
    correct: Boolean!
    """
    Feedback for when the user selects this answer, can be markdown.
    """
    feedback: String @Size(max: 1000)
}