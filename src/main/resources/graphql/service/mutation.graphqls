type Mutation {
    """
    Create a quiz.
    """
    createQuiz(assessmentId: UUID!, input: CreateQuizInput!): Quiz!

    """
    Modify a quiz.
    """
    mutateQuiz(assessmentId: UUID!): QuizMutation!

    """
    Delete a quiz.
    """
    deleteQuiz(assessmentId: UUID!): UUID!
    @deprecated(reason: "Only for development, will be removed in production. Use deleteAssessment in contents service instead.")

    """
    Log that a multiple choice quiz is completed.
    """
    logQuizCompleted(input: QuizCompletedInput!): QuizCompletionFeedback!
}

type QuizMutation {
    """
    Id of the quiz to modify.
    """
    assessmentId: UUID!
    """
    Add a multiple choice question to the quiz questions, at the end of the list.
    """
    addMultipleChoiceQuestion(input: CreateMultipleChoiceQuestionInput!): Quiz!
    """
    Update a multiple choice question in the quiz questions.
    """
    updateMultipleChoiceQuestion(input: UpdateMultipleChoiceQuestionInput!): Quiz!

    """
    Add a cloze question to the quiz questions, at the end of the list.
    """
    addClozeQuestion(input: CreateClozeQuestionInput!): Quiz!
    """
    Update a cloze question in the quiz questions.
    """
    updateClozeQuestion(input: UpdateClozeQuestionInput!): Quiz!

    """
    Add an association question to the quiz questions, at the end of the list.
    """
    addAssociationQuestion(input: CreateAssociationQuestionInput!): Quiz!
    """
    Update an association question in the quiz questions.
    """
    updateAssociationQuestion(input: UpdateAssociationQuestionInput!): Quiz!

    """
    Add an free text question with exact answer to the quiz questions, at the end of the list.
    """
    addExactAnswerQuestion(input: CreateExactAnswerQuestionInput!): Quiz!
    """
    Update an free text question with exact answer in the quiz questions.
    """
    updateExactAnswerQuestion(input: UpdateExactAnswerQuestionInput!): Quiz!
    """
    Add a numeric question to the quiz questions, at the end of the list.
    """
    addNumericQuestion(input: CreateNumericQuestionInput!): Quiz!
    """
    Update a numeric question in the quiz questions.
    """
    updateNumericQuestion(input: UpdateNumericQuestionInput!): Quiz!

    """
    Add a self assessment question to the quiz questions, at the end of the list.
    """
    addSelfAssessmentQuestion(input: CreateSelfAssessmentQuestionInput!): Quiz!
    """
    Update a self assessment question in the quiz questions.
    """
    updateSelfAssessmentQuestion(input: UpdateSelfAssessmentQuestionInput!): Quiz!

    # add other types of questions here

    """
    Removes the question with the given number from the quiz.
    This will also update the numbers of the following questions.
    """
    removeQuestion(number: Int! @Positive): Quiz!
    """
    Switch the position of two questions with the given numbers.
    """
    switchQuestions(firstNumber: Int! @Positive, secondNumber: Int! @Positive): Quiz!


    """
    Set the threshold of the quiz, i.e., how many questions the user has to answer correctly to pass the quiz.
    """
    setRequiredCorrectAnswers(requiredCorrectAnswers: Int! @PositiveOrZero): Quiz!
    """
    Set the question pooling mode of the quiz.
    """
    setQuestionPoolingMode(questionPoolingMode: QuestionPoolingMode!): Quiz!
    """
    Set the number of questions that are randomly selected from the list of questions.
    Will only be considered if questionPoolingMode is RANDOM.
    """
    setNumberOfRandomlySelectedQuestions(numberOfRandomlySelectedQuestions: Int! @Positive): Quiz!
}


input CreateQuizInput {

    """
    Threshold of the quiz, i.e., how many questions the user has to answer correctly to pass the quiz.

    If this is greater than the number of questions, the behavior is the same
    as if it was equal to the number of questions.
    """
    requiredCorrectAnswers: Int! @PositiveOrZero

    """
    Question pooling mode of the quiz.
    """
    questionPoolingMode: QuestionPoolingMode!

    """
    Number of questions that are randomly selected from the list of questions.
    Should only be set if questionPoolingMode is RANDOM.

    If this is greater than the number of questions, the behavior is the same
    as if it was equal to the number of questions.

    If this is null or not set, the behavior is the same as if it was equal to the number of questions.
    """
    numberOfRandomlySelectedQuestions: Int @Positive
}

input CreateMultipleChoiceQuestionInput {
    """
    Number of the question, used for ordering.
    This can be omitted, in which case a number, one higher than the highest number of the existing questions, will be used.
    """
    number: Int @Positive
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    List of answers.
    """
    answers: [MultipleChoiceAnswerInput!]! @ContainerSize(min: 2)
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input UpdateMultipleChoiceQuestionInput {
    """
    UUID of the question to update.
    """
    id: UUID!
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    List of answers.
    """
    answers: [MultipleChoiceAnswerInput!]!
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON

}

input MultipleChoiceAnswerInput {
    """
    Text of the answer, in SlateJS JSON format.
    """
    answerText: JSON!
    """
    Whether the answer is correct or not.
    """
    correct: Boolean!
    """
    Feedback for when the user selects this answer, in SlateJS JSON format.
    """
    feedback: JSON
}

input CreateClozeQuestionInput {
    """
    Number of the question, used for ordering.
    This can be omitted, in which case a number, one higher than the highest number of the existing questions, will be used.
    """
    number: Int @Positive
    """
    List of cloze elements.
    """
    clozeElements: [ClozeElementInput!]! @ContainerSize(min: 1)
    """
    List of additional wrong answers.
    """
    additionalWrongAnswers: [String!]! = [] @ContainerSize(min: 0) @Size(max: 255)
    """
    If true, the list of possible answers will be shown to the user.
    """
    showBlanksList: Boolean! = true
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input UpdateClozeQuestionInput {
    """
    UUID of the question to update.
    """
    id: UUID!
    """
    List of cloze elements.
    """
    clozeElements: [ClozeElementInput!]! @ContainerSize(min: 1)
    """
    List of additional wrong answers.
    """
    additionalWrongAnswers: [String!]! @ContainerSize(min: 0) @Size(max: 255)
    """
    If true, the list of possible answers will be shown to the user.
    """
    showBlanksList: Boolean! = true
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input ClozeElementInput {
    """
    Type of the element.
    """
    type: ClozeElementType!

    """
    Text of the element. Only used for TEXT type.
    """
    text: JSON

    """
    The correct answer for the blank. Only used for BLANK type.
    """
    correctAnswer: String @Size(max: 255)
    """
    Feedback for the blank when the user selects a wrong answer, in SlateJS JSON format. Only used for BLANK type.
    """
    feedback: JSON
}

input CreateAssociationQuestionInput {
    """
    Number of the question, used for ordering.
    This can be omitted, in which case a number, one higher than the highest number of the existing questions, will be used.
    """
    number: Int @Positive
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    List of associations.
    """
    correctAssociations: [AssociationInput!]! @ContainerSize(min: 2)
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input UpdateAssociationQuestionInput {
    """
    UUID of the question to update.
    """
    id: UUID!
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    List of associations.
    """
    correctAssociations: [AssociationInput!]! @ContainerSize(min: 2)
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input AssociationInput {
    """
    Text of the left side of the association, in SlateJS JSON format.
    """
    left: String! @Size(max: 255)
    """
    Text of the right side of the association, in SlateJS JSON format.
    """
    right: String! @Size(max: 255)
    """
    Feedback for the association when the user selects a wrong answer, in SlateJS JSON format.
    """
    feedback: JSON
}

input CreateExactAnswerQuestionInput {
    """
    Number of the question, used for ordering.
    This can be omitted, in which case a number, one higher than the highest number of the existing questions, will be used.
    """
    number: Int @Positive
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    If the answer is case sensitive. If true, the answer is checked case sensitive.
    """
    caseSensitive: Boolean! = false
    """
    A list of possible correct answers.
    """
    correctAnswers: [String!]! @ContainerSize(min: 1) @Size(max: 255)
    """
    Feedback for the question when the user enters a wrong answer, in SlateJS JSON format.
    """
    feedback: JSON
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input UpdateExactAnswerQuestionInput {
    """
    UUID of the question to update.
    """
    id: UUID!
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    A list of possible correct answers.
    """
    correctAnswers: [String!]! @ContainerSize(min: 1)
    """
    If the answer is case sensitive. If true, the answer is checked case sensitive.
    """
    caseSensitive: Boolean! = false
    """
    Feedback for the question when the user enters a wrong answer, in SlateJS JSON format.
    """
    feedback: JSON
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input CreateNumericQuestionInput {
    """
    Number of the question, used for ordering.
    This can be omitted, in which case a number, one higher than the highest number of the existing questions, will be used.
    """
    number: Int @Positive
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    The correct answer for the question.
    """
    correctAnswer: Float!
    """
    The allowed deviation from the correct answer.
    """
    tolerance: Float! @Positive
    """
    Feedback for the question when the user enters a wrong answer, in SlateJS JSON format.
    """
    feedback: JSON
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input UpdateNumericQuestionInput {
    """
    UUID of the question to update.
    """
    id: UUID!
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    The correct answer for the question.
    """
    correctAnswer: Float!
    """
    The allowed deviation from the correct answer.
    """
    tolerance: Float! @Positive
    """
    Feedback for the question when the user enters a wrong answer, in SlateJS JSON format.
    """
    feedback: JSON
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input CreateSelfAssessmentQuestionInput {
    """
    Number of the question, used for ordering.
    This can be omitted, in which case a number, one higher than the highest number of the existing questions, will be used.
    """
    number: Int @Positive
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    A possible correct answer to the question.
    """
    solutionSuggestion: JSON!
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input UpdateSelfAssessmentQuestionInput {
    """
    UUID of the question to update.
    """
    id: UUID!
    """
    Text of the question, in SlateJS JSON format.
    """
    text: JSON!
    """
    A possible correct answer to the question.
    """
    solutionSuggestion: JSON!
    """
    Optional hint for the question, in SlateJS JSON format.
    """
    hint: JSON
}

input QuizCompletedInput {
    """
    ID of the quiz.
    """
    quizId: UUID!

    """
    List of questions that were answered in the quiz.
    """
    completedQuestions: [QuestionCompletedInput!]!
}

input QuestionCompletedInput {
    """
    ID of the question.
    """
    questionId: UUID!
    """
    true when question was answered correctly
    """
    correct: Boolean!
    """
    true when a hint was used for the question
    """
    usedHint: Boolean!
}