"""
A quiz is a set of questions that the user has to answer correctly to pass the quiz.
Questions can be of different types, e.g., multiple choice, clozes, or open questions.
"""
type Quiz {
    """
    Identifier of the quiz, same as the identifier of the assessment.
    """
    assessmentId: UUID!
    """
    List of questions.
    """
    questionPool: [Question!]!
    """
    Threshold of the quiz, i.e., how many questions the user has to answer correctly to pass the quiz.
    If this number is greater than the number of questions, the behavior is the same
    as if it was equal to the number of questions.
    """
    requiredCorrectAnswers: Int!

    """
    Question pooling mode of the quiz.
    """
    questionPoolingMode: QuestionPoolingMode!

    """
    Number of questions that are randomly selected from the list of questions.
    Will only be considered if questionPoolingMode is RANDOM.

    If this is greater than the number of questions, the behavior is the same
    as if it was equal to the number of questions.

    If this is null or not set, the behavior is the same as if it was equal to the number of questions.
    """
    numberOfRandomlySelectedQuestions: Int

    """
    The selected questions of the question pool.
    This is identical to the list of questions if questionPoolingMode is ORDERED.
    This will be different each time it is queried if questionPoolingMode is RANDOM.
    """
    selectedQuestions: [Question!]!
}

enum QuestionPoolingMode {
    """
    Questions are randomly selected from the list of questions.
    """
    RANDOM
    """
    Questions are selected in order from the list of questions.
    """
    ORDERED
}

"""
Generic question interface.
"""
interface Question {
    """
    Unique identifier of the question.
    """
    id: UUID!

    """
    Number of the question, i.e., the position of the question in the list of questions.
    Only relevant if questionPoolingMode is ORDERED.
    """
    number: Int!

    """
    Type of the question.
    """
    type: QuestionType!

    """
    Optional hint for the question, can be markdown.
    """
    hint: ResourceMarkdown
}

"""
Multiple choice question, i.e., a question with multiple answers of which the user has to select the correct ones.
"""
type MultipleChoiceQuestion implements Question {
    """
    Text of the question, can be markdown.
    """
    text: ResourceMarkdown!
    """
    List of answers.
    """
    answers: [MultipleChoiceAnswer!]!
    """
    How many answers the user has to select. This is computed from the list of answers.
    """
    numberOfCorrectAnswers: Int!

    # inherited from Question
    """
    Unique identifier of the question.
    """
    id: UUID!

    """
    Number of the question, i.e., the position of the question in the list of questions.
    Only relevant if questionPoolingMode is ORDERED.
    """
    number: Int!

    """
    Type of the question.
    """
    type: QuestionType!

    """
    Optional hint for the question, can be markdown.
    """
    hint: ResourceMarkdown
}

type MultipleChoiceAnswer {
    """
    Text of the answer, can be markdown.
    """
    text: ResourceMarkdown!
    """
    Whether the answer is correct or not.
    """
    correct: Boolean!
    """
    Feedback for when the user selects this answer, can be markdown.
    """
    feedback: ResourceMarkdown
}

type ClozeQuestion implements Question {
    """
    The elements of the cloze question.
    """
    clozeElements: [ClozeElement!]!
    """
    Addtional wrong answers for the blanks.
    """
    additionalWrongAnswers: [String!]!
    """
    All selectable answers for the blanks (computed). This contains the correct answers as well as wrong answers.
    """
    allBlanks: [String!]!
    """
    Whether the blanks must be answered in free text or by selecting the correct answer from a list.
    """
    showBlanksList: Boolean!

    # inherited from Question
    """
    Unique identifier of the question.
    """
    id: UUID!
    """
    Number of the question, i.e., the position of the question in the list of questions.
    Only relevant if questionPoolingMode is ORDERED.
    """
    number: Int!
    """
    Type of the question.
    """
    type: QuestionType!
    """
    Optional hint for the question, can be markdown.
    """
    hint: ResourceMarkdown
}

union ClozeElement = ClozeTextElement | ClozeBlankElement

type ClozeTextElement {
    """
    Text of the element, can be markdown.
    """
    text: ResourceMarkdown!
}

type ClozeBlankElement {
    """
    The correct answer for the blank.
    """
    correctAnswer: String!
    """
    Feedback for the blank when the user selects a wrong answer, can be markdown.
    """
    feedback: ResourceMarkdown
}

enum ClozeElementType {
    TEXT
    BLANK
}

"""
Association question, i.e., a question where the user has to assign the correct right side to each left side.
"""
type AssociationQuestion implements Question {
    """
    Text to display above the assignment question, can be markdown.
    """
    text: ResourceMarkdown!
    """
    List of correct associations.
    """
    correctAssociations: [SingleAssociation!]!
    """
    Computed list of all the left sides of the associations, shuffled.
    """
    leftSide: [String!]!
    """
    Computed list of all the right sides of the associations, shuffled.
    """
    rightSide: [String!]!

    # inherited from Question
    """
    Unique identifier of the question.
    """
    id: UUID!
    """
    Number of the question, i.e., the position of the question in the list of questions.
    Only relevant if questionPoolingMode is ORDERED.
    """
    number: Int!
    """
    Type of the question.
    """
    type: QuestionType!
    """
    Optional hint for the question, can be markdown.
    """
    hint: ResourceMarkdown
}

type SingleAssociation {
    """
    The left side of the assignment.
    """
    left: String!
    """
    The right side of the assignment.
    """
    right: String!

    """
    Feedback for the assignment when the user assigns a wrong answer, can be markdown.
    """
    feedback: ResourceMarkdown
}

"""
A question with a clear, correct answer that can be automatically checked.
Differs from self-assessment questions in that the user has to enter one of the correct answers and
the answer is checked automatically.
"""
type ExactAnswerQuestion implements Question {
    """
    Text of the question, can be markdown.
    """
    text: ResourceMarkdown!
    """
    A list of possible correct answers. The user has to enter one of these answers.
    """
    correctAnswers: [String!]!
    """
    If the answer is case sensitive. If true, the answer is checked case sensitive.
    """
    isCaseSensitive: Boolean!
    """
    Feedback for the question when the user enters a wrong answer, can be markdown.
    """
    feedback: ResourceMarkdown

    # inherited from Question
    """
    Unique identifier of the question.
    """
    id: UUID!
    """
    Number of the question, i.e., the position of the question in the list of questions.
    Only relevant if questionPoolingMode is ORDERED.
    """
    number: Int!
    """
    Type of the question.
    """
    type: QuestionType!
    """
    Optional hint for the question, can be markdown.
    """
    hint: ResourceMarkdown
}

type NumericQuestion implements Question {
    """
    Text of the question, can be markdown.
    """
    text: ResourceMarkdown!
    """
    The correct answer to the question.
    """
    correctAnswer: Float!
    """
    The number of decimal places to consider when checking the answer.
    Both the correct answer and the user's answer are rounded to this number of decimal places.
    """
    decimalPlaces: Int!

    """
    Feedback for the question when the user enters a wrong answer, can be markdown.
    """
    feedback: ResourceMarkdown

    # inherited from Question
    """
    Unique identifier of the question.
    """
    id: UUID!
    """
    Number of the question, i.e., the position of the question in the list of questions.
    Only relevant if questionPoolingMode is ORDERED.
    """
    number: Int!
    """
    Type of the question.
    """
    type: QuestionType!
    """
    Optional hint for the question, can be markdown.
    """
    hint: ResourceMarkdown
}

"""
A single question with a free text answer field, where the answer is not automatically checked.
The user has to enter a solution and self-assess whether it is correct or not.
This is useful for questions where the answer is not clear-cut, e.g. when the user should explain a concept.
"""
type SelfAssessmentQuestion {
    """
    Text of the question, can be markdown.
    """
    text: ResourceMarkdown!
    """
    A possible correct answer to the question.
    """
    solutionSuggestion: ResourceMarkdown!

    # inherited from Question
    """
    Unique identifier of the question.
    """
    id: UUID!
    """
    Number of the question, i.e., the position of the question in the list of questions.
    Only relevant if questionPoolingMode is ORDERED.
    """
    number: Int!
    """
    Type of the question.
    """
    type: QuestionType!
    """
    Optional hint for the question, can be markdown.
    """
    hint: ResourceMarkdown
}

"""
The type of a question.
"""
enum QuestionType {
    MULTIPLE_CHOICE
    CLOZE
    ASSIGNMENT
    EXACT_ANSWER
    NUMERIC_QUESTION
    SELF_ASSESSMENT
    # add more types here
}